// This script will compile all your source files into one and build the executable
// The downside of this script is that it forces you to adopt a linear approach to your code
// Meaning, this is the structure of the code you need
// - project/
// 		- project.src
//		- module1.src
//		- module2.src
// zetsumeishi

debug = false
eol = char(10)  // "\n" character
file_extension = ".src"
help = "<b>[USAGE]</b> compile project_name\n  --debug: Keeps the compiled source file."

if params.len == 0 or params.len > 2 or params[0] == "-h" or params[0] == "--help" then
	exit(help)
else if params.indexOf("--debug") then
	debug = true
	params.remove(params.indexOf("--debug"))
end if

shell = get_shell()
computer = shell.host_computer()
project_name = params[0]
project_filename = project_name + file_extension  // File containing the #import statements
project_path = home_dir() + "/" + project_name + "/"
tmp_filename = project_name + "_debug.src"  // File that we build in the end
project_dir = shell.host_computer.File(project_path)
source_files = project_dir.get_files()

// Removing from source_files list binaries and the temporary file
index = 0
for file in source_files
	if file.is_binary() or file.name == tmp_filename then
		source_files.remove(index)
	end if
	index = index + 1
end for

// Getting a file object for the project file and temporary file
file_to = computer.File(project_path + project_filename)
computer.touch(project_path, tmp_filename)
tmp_file = computer.File(project_path + tmp_filename)

// Listing all the modules to import from the project file
modules = []
file_to_content = file_to.content.split(eol)
nb_imports = 0
for line in file_to_content
	if line and line[0] == "#" then
		modules.push(line.split(" ")[1] + file_extension)
		nb_imports = nb_imports + 1
	end if
end for


// Removing the #import statements from the project file content
for i in range(0, nb_imports - 1)
	file_to_content.pull()
end for

// Getting all the source files content in order of imports
tmp_content = []
for module in modules
	file_from = computer.File(project_path + module)
	tmp_content.push(file_from.content.trim)
end for

tmp_content.push(file_to_content.join("\n"))  // Adding project file content
tmp_file.set_content(tmp_content.join("\n"))
shell.build(tmp_file.path, project_path)
executable = computer.File(project_path + tmp_file.name[:-4])
executable.rename(project_name)
executable.delete()
if debug == false then tmp_file.delete()
